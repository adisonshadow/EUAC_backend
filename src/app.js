const Koa = require('koa');
const bodyParser = require('koa-bodyparser');
const cors = require('@koa/cors');
const config = require('./config');
const logger = require('./utils/logger');
const errorHandler = require('./middlewares/errorHandler');
const routes = require('./routes');
const { koaSwagger } = require('koa2-swagger-ui');
const swaggerJSDoc = require('swagger-jsdoc');
const healthRoutes = require('./routes/healthRoutes');

// Swagger ÈÖçÁΩÆ
const swaggerDefinition = {
  openapi: '3.0.0',
  info: {
    title: 'UAC API Documentation',
    version: '1.0.0',
    description: 'Áî®Êà∑ËÆ§ËØÅÂíåÊéàÊùÉÁ≥ªÁªü API ÊñáÊ°£',
  },
  servers: [
    {
      url: 'http://localhost:3000',
      description: 'ÂºÄÂèëÊúçÂä°Âô®',
    },
  ],
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
      },
    },
  },
  security: [
    {
      bearerAuth: [],
    },
  ],
};

const options = {
  swaggerDefinition,
  apis: ['./src/routes/*.js'], // API Ë∑ØÁî±Êñá‰ª∂ÁöÑË∑ØÂæÑ
};

// ÁîüÊàê Swagger ÊñáÊ°£
let swaggerSpec;
try {
  swaggerSpec = swaggerJSDoc(options);
  logger.info('‚úÖ Successfully generated Swagger document');
} catch (error) {
  logger.error('‚ùå Failed to generate Swagger document', { error: error.message });
  process.exit(1);
}

// ÂàõÂª∫Â∫îÁî®ÂÆû‰æã
const app = new Koa();

// ÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂ÔºàÊîæÂú®ÊúÄÂâçÈù¢Ôºâ
app.use(errorHandler);

// ‰∏≠Èó¥‰ª∂ÈÖçÁΩÆ
app.use(cors());
app.use(bodyParser());

// Swagger UI ÈÖçÁΩÆ
try {
  app.use(
    koaSwagger({
      routePrefix: '/swagger',
      swaggerOptions: {
        spec: swaggerSpec,
      },
    }),
  );
  logger.info('‚úÖ Successfully configured Swagger UI');
} catch (error) {
  logger.error('‚ùå Failed to configure Swagger UI', { error: error.message });
  process.exit(1);
}

// Ê∑ªÂä† OpenAPI JSON Ë∑ØÁî±
app.use(async (ctx, next) => {
  if (ctx.path === '/swagger.json') {
    ctx.type = 'application/json';
    ctx.body = swaggerSpec;
    return;
  }
  await next();
});

// Ê∑ªÂä†ËØ∑Ê±ÇÊó•Âøó
app.use(async (ctx, next) => {
  const start = Date.now();
  try {
    await next();
    const ms = Date.now() - start;
    logger.info('Request completed', {
      method: ctx.method,
      url: ctx.url,
      status: ctx.status,
      duration: `${ms}ms`
    });
  } catch (error) {
    const ms = Date.now() - start;
    logger.error('Request error', {
      method: ctx.method,
      url: ctx.url,
      status: ctx.status,
      duration: `${ms}ms`,
      name: error.name,
      message: error.message,
      stack: error.stack
    });
    throw error;
  }
});

// Ë∑ØÁî±ÈÖçÁΩÆ
app.use(routes.routes());
app.use(routes.allowedMethods());

// Ê≥®ÂÜåË∑ØÁî±
app.use(healthRoutes.routes());

// Ê£ÄÊü•ÊúçÂä°Âô®ÊòØÂê¶Â∑≤ÂêØÂä®
let server = null;

// Â¶ÇÊûú‰∏çÊòØÊµãËØïÁéØÂ¢ÉÔºåÂàôÂêØÂä®ÊúçÂä°Âô®
if (process.env.NODE_ENV !== 'test') {
  const PORT = config.api.port || 3000;
  try {
    server = app.listen(PORT, () => {
      logger.info(`üöÄ ‚úÖ‚úÖ‚úÖ‚úÖ API Server started on port ${PORT}`);
      logger.info(`üìä Environment: ${process.env.NODE_ENV}`);
      logger.info(`üîó Health check: http://localhost:${PORT}/api/v1/health`);
      logger.info(`üìö Swagger UI: http://localhost:${PORT}/swagger`);
      logger.info(`üìÑ Swagger JSON: http://localhost:${PORT}/swagger.json`);
    });
  } catch (error) {
    logger.error('ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•', {
      error: error.message,
      stack: error.stack
    });
    process.exit(1);
  }
} else {
  // Âú®ÊµãËØïÁéØÂ¢É‰∏≠ÔºåÂàõÂª∫‰∏Ä‰∏™ÊúçÂä°Âô®ÂÆû‰æãÂπ∂ÂØºÂá∫
  const PORT = config.api.port || 3000;
  try {
    server = app.listen(PORT);
    if (!server) {
      logger.error('‚ùå Failed to start server');
      process.exit(1);
    }
  } catch (error) {
    logger.error('‚ùå Failed to start server', {
      error: error.message,
      stack: error.stack
    });
    process.exit(1);
  }
}

// Ê∑ªÂä†ÈîôËØØÂ§ÑÁêÜ
server.on('error', (error) => {
  logger.error('‚ùå Server error', {
    name: error.name,
    message: error.message,
    stack: error.stack
  });
  process.exit(1);
});

// Ê∑ªÂä†Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏Â§ÑÁêÜ
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught exception', {
    name: error.name,
    message: error.message,
    stack: error.stack
  });
  process.exit(1);
});

// Ê∑ªÂä†Êú™Â§ÑÁêÜÁöÑ Promise ÊãíÁªùÂ§ÑÁêÜ
process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled promise rejection', {
    reason: reason,
    promise: promise
  });
  process.exit(1);
});

module.exports = app;